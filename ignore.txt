困则思变
现在的状态真是让我恶心而又无力。
浑浑噩噩的当着撞钟的和尚，忘记了什么叫努力，也放弃了变得更好。
连努力的勇气都没有，却开始了反问为什么？
为什么？因为你现在还很弱小啊！

是时候了，是时候重新站起来了！

目标：Ping++,23K+
list:
linux(ubuntu)，熟练的包管理，IDE（php/go），init.d，cpu/内存/硬盘/IO/监控/流量，shell脚本。
Git
php，支付对接，框架（？） composer
nginx服务器配置  顺便压测   负载均衡
mysql 锁（随便了解）  数据库主从
GoLang   包形式
VPN      ok

加油！




linux:
ubuntu安装成功（vmware）：
    ubuntu/win10双系统安装：
	充满血泪的两天。
	现在开机启动方式有两种：BIOS（旧式启动）/UEFI（新式启动）  两者在我的电脑上可以兼容同时存在。 Bios是结合　ｍbr文件引导，UEFI是结合efi文件引导。
	目前，win10默认安装后选择UEFI方式启动。Ubuntu也支持uefi方式启动。
	可以直接将ISo文件解压到U盘中，在UEFI中设置从U盘启动，程序会自动找到UEFI文件夹下完成引导。
	其次，微软有一个secure boot项目，用于保护自身的操作系统，可以在UEFI中关闭。
	遇到的坑。。。。。。
	首先，双显卡问题。双显卡在进入启动项目后会出现卡死/黑屏等一些情况，可以在引导菜单出现后。按E 进入文件编辑。添加nomodeset项目。避免出现驱动冲突。
	U盘问题。通过BIOS引导。出现a required file is missing or contains errors.... 通过UEFI引导usb device read error/unable to find a medium containing a live file system。只能确定是硬件问题，始终无法定位到问题的所在。最后，，，换U盘搞定。。。（usb3.0->usb2.0)

linux下安装xp虚拟机：
     使用virtualBox安装雨林木风ghostXP失败，更换为vmware player。
     使用PQ分区，主分区（C）逻辑分区（D），注意，主分区要设置为作用的。否则安装后开机将会引导失败！
网络配置（linux）下






开启3d加速后瞬间不卡。
联网方式 host-only  只要保证ubuntu内的IP设置和VMnet1在一个网段即可，ping通
主机、虚拟机不能共享剪切板问题：重新安装vmware tools
输入法：sogou
Linux下的输入法是基于一个底层框架，有ibus/fcitx

全民wifi上网问题：
在安装了官方驱动后，成功上网一段时间，出现系统崩溃。
ubuntu klyin的kernal是3.X kernel没有集成mt7601驱动，
因此，尝试选择其他方案：
ppa:thopiekar/mt7601

包管理：
	apt-get 
	1.定位包 
	dpkg -l | grep reminders   dpkg -l 列出所有安装的包
	or

	dpkg -S file–>这个文档属于哪个已安装软件包 
	dpkg -L package–>列出软件包中的任何文档

	dpkg -r package 删除包（保留配置）
	dpkg -P package 删除 （不保留配置）

	ppa源：实质上就是https://launchpad.net/ubuntu/+ppas 这个网站上一个对应的ID，用来下载该用户提交的应用
	sudo add-apt-repository ppa:user/ppa-name  添加ppa源
	sudo apt-get update  更新源
	此时就可以在系统中查看、安装对应的软件
	apt-cache search mt7601
	apt-get install mt7601-sta-dkms

	apt-get build-dep 可以解决依赖。
	最好不使用源码安装，一定要使用源码安装的话，务必制定--prefix参数。
	

模块相关：
	lsmod  列出 已经加载 的模块
	cat /lib/modules/'uname -r' /modules.dep 可以查看所有的系统模块 包括未加载的。
	modprobe XXX 加载模块
	modprobe -r XXX 删除模块



使用PPA源 安装完成后，已经可以在modules.dep中看到该模块：
root@ubuntu:/lib/firmware# cat /lib/modules/4.2.0-16-generic/modules.dep| grep mt7601
kernel/drivers/net/wireless/mediatek/mt7601u/mt7601u.ko: kernel/net/mac80211/mac80211.ko kernel/net/wireless/cfg80211.ko
updates/dkms/mt7601Usta.ko:

可以看到有两个ko，一个是kernel自带的 mt7601u ，一个是新安装的 mt7601Usta。
加载： 
modprobe mt7601Usta  
lsmod已经可以看到  mt7601Usta  了。



翻墙（搞定）
shadowsocks(ss-qt5) +  switchysharp
shadowsocks 建立与VPS（my hosts)的连接。通过指定的本地接口转发请求。
因此，在ss执行后，需要设置代理。
直接使用IE代理，或者360内的代理，会将所有的请求都转发到ss上，因此，我们需要一个软件来自动切换。例如访问国内站点时，不走ss，访问google时，则采用ss。这样就可以最大程度保证访问的通畅。
swichysharp采用自动切换。有现成的配置文件。可以直接导入。
所谓的在线规则就是指定乱七八糟的一大堆网址，请求的时候转发到自己的ss上，没什么大不了的。


（lantern 待研究）
关于chromeGae  其实就是 集成了 chrome/switchyOmega/lantern 的合计。
lantern启动后，会将请求转发到8787端口上。
switchyOmege则是负责配置需要转发的请求。





ubuntu下首次提交
vi:
问题：
   ubuntu中vi在编辑状态下方向键不能用，还有回格键不能删除等我们平时习惯的一些键都不能使用。

解决办法：
   可以安装vim full版本，在full版本下键盘正常，安装好后同样使用vi命令。
安装vim：
 ubuntu预装的是vim tiny版本，而需要的是vim full版本。执行下面的语句安装vim full版本：
   $sudo apt-get remove vim-common
   $sudo apt-get install vim




git:
windows下，bash可以正常使用git push/pull命令。
cmd提示Permission denied (publickey)。
原因是没有设置%HOME%环境变量，添加%HOME%为包含.ssh的文件夹路径（一般是C:/users/XX）

使用ssh-agent可以避免每次push的时候都要重复输入帐号密码。

git 默认只会找~/.ssh/id_rsa的key，因此要支持多账户，则需要使用.ssh/config

1、配置github ssh，避免push时反复提交密码
	ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_rsa
	Add the SSH key to your GitHub account.（公钥添加）
	测试是否正确：
	ssh -T git@github.com
	如果提示：
	Hi username! You've successfully authenticated, but GitHub does not
provide shell access.则表示正确配置。

坑：理论上提示出现以后，push时已经可以自动push而不需要反复输密码，出现了这种原因后，经过排查：
SSH forwarding only works with SSH URLs, not HTTP(s) URLs. Check the .git/config file on your server and ensure the URL is an SSH-style URL like below:

[remote "origin"]
  url = git@github.com:yourAccount/yourProject.git
  fetch = +refs/heads/*:refs/remotes/origin/*
  修改后即可正常运行。

2、多账户
在.ssh目录下
	a 新增一个ssh key  ssh-keygen -t rsa -C "liucj@2345.com"，新增时，会提示id_rsa已经存在，输入一个新的文件名。则公钥私钥都会保存在新文件名中
	
	b 新建config文件。内容：
	Host gitlab245
	  HostName 172.16.0.245 
	  User liucj@2345.com
	  IdentityFile ~/.ssh/gitlab245

	c add ssh key to ssh-agent
	  eval "$(ssh-agent -s)"
	  ssh-add ~/.ssh/gitlab245
	
	d test ssh connect 
	ssh -T git@172.16.0.245 




进程/线程
一个CPU单次只能处理一个进程（一个程序）
因此，在多核CPU上为了能够更大程度利用CPU，大部分程序都会对多线程做支持。

关于多进程 （多进程单线程） 好还是多线程（单进程多线程）好 ，众说纷纭我也不知道。。。

另：（关于php单线程）
php本身不支持多线程，用来处理数据运算很蛋疼。但是，并不意味着php不能处理网络请求，因为
网络请求的线程是由服务器！！来建立的。而php本身有自己的进程管理器（比如php-fpm），每个
请求过来后都会创建一个Php进程与服务器通信，断开后销毁进程。
创建一个进程的消耗要大于线程，但难度要小于线程（不涉及到内存共享之类）



goroutine的 RWMutex（读写锁）
当多个线程操作一个共享内存时（例如写数据）可能会出现异常情况。
因此为了保证数据正确性，多个goroutine时要注意锁的使用。

读写锁是针对读写的互斥锁
基本遵循两大原则：
1、可以随便读，多个goroutine同时读
2、写的时候，啥也不能干。不能读也不能写




linux 命令

分割字符串：
cut awk
mysql5.6 - XXXXXXXX
cut :
	cut -d' ' -f1    //-d后面为分隔符   空格为‘  ‘
awk:
	awk '{print $1}' // -F后面为分隔符   默认为空格    命令需要放在'{}'内


xargs  
ls|xargs wc -l    将前面标准化输出的结果逐行作为 命令参数执行

ps 进程查看
	参数
	参数有几类：
	1 /   进程选择参数   指定输出哪一些进程
	a 终端机下的所有程序
	x 非终端机下所有进程
	-A /-e 所有进程
	所以 ps -A 实质上等于 ps ax

	2/ 指定进程参数     指定的命令名/PID/groupID
	-p 111
	-C watch/bash	

	3/输出结果控制参数
	-f 全格式
	-j 作业模式
	-l 长格式
	u  用户模式
	-o format    输出用户定义的格式例如 %cpu,%mem,pid,psr,args等等

	4/输出结果修饰参数   在输出的结果基础上进行修饰
	c 只输出命令名  不输出参数/路径等   （参数太长不看）
	O order 排序


	5/  线程相关参数
	-L 输出线程 ，包括LWP（线程id)
	 
	输出控制选项 （可以作为-o 参数）
	非常多，几个有意思的：
	args   执行命令（包括参数/路径）
	comm	 只有命令（不包括参数路径）
	psr    进程（or线程）目前在哪个CPU上工作

最后，监控go的goroutine具体情况命令：
watch -n 1 'ps -eLo s,pid,ppid,lwp,%cpu,%mem,args,psr|grep goroutine'    可以看到当前的goroutine线程  具体分布在哪个CPU上面，cpu占用情况等一系列数据。



课题：玩玩Php的多进程实现，与go做比较。结合docker，比较php5 php7


































